{"version":3,"file":null,"sources":["../src/utils.js","../src/Statement.js","../src/Database.js","../src/Sqlite.js"],"sourcesContent":["/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction prepareParams (args, requireCallback = false) {\n  let callback;\n  if (requireCallback) {\n    if (args.length < 1) {\n      throw new Error('Callback argument is required');\n    }\n    callback = args.pop();\n  }\n  const params = args.length === 1 ? args[0] : args;\n  return callback ? [params, callback] : params;\n}\n\nfunction isThenable (obj) {\n  return obj !== undefined &&\n         obj !== null &&\n         typeof obj === 'object' &&\n         'then' in obj &&\n         typeof obj.then === 'function';\n}\n\nfunction asyncRunner (Promise = global.Promise) {\n  return function runAsync (fn, ...args) {\n    const gen = fn.apply(this, args);\n    return new Promise((resolve, reject) => {\n      function step (key, arg) {\n        let info;\n        let value;\n\n        try {\n          info = gen[key](arg);\n          value = info.value;\n        }\n        catch (error) {\n          return reject(error);\n        }\n\n        if (info.done) {\n          return resolve(value);\n        }\n        return Promise.resolve(value).then((val) => {\n          step('next', val);\n        }, (err) => {\n          step('throw', err);\n        });\n      }\n\n      return step('next');\n    });\n  };\n}\n\nexport { prepareParams, isThenable, asyncRunner };\n","/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport { prepareParams } from './utils';\n\nclass Statement {\n\n  constructor (stmt, Promise) {\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  get sql () {\n    return this.stmt.sql;\n  }\n\n  get lastID () {\n    return this.stmt.lastID;\n  }\n\n  get changes () {\n    return this.stmt.changes;\n  }\n\n  bind (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.bind(params, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  reset () {\n    return new this.Promise((resolve) => {\n      this.stmt.reset(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  finalize () {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.finalize((err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.run(params, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.get(params, (err, row) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.all(params, (err, rows) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  each (...args) {\n    const [params, callback] = prepareParams(args, true);\n\n    return new this.Promise((resolve, reject) => {\n      let error = null;\n\n      const cb = (err, row) => {\n        if (error !== null) {\n          return;\n        }\n        try {\n          callback(row);\n        }\n        catch (e) {\n          error = e;\n        }\n      };\n\n      const done = (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        }\n        else if (error) {\n          reject(error);\n        }\n        else {\n          resolve(rowsCount);\n        }\n      };\n\n      this.stmt.each(params, cb, done);\n    });\n  }\n\n}\n\nexport default Statement;\n","/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport Statement from './Statement';\nimport { prepareParams, asyncRunner } from './utils';\n\nclass Database {\n\n  /**\n   * Initializes a new instance of the database client.\n   * @param driver An instance of SQLite3 driver library.\n   * @param promiseLibrary ES6 Promise library to use.\n     */\n  constructor (driver, { Promise, trxImmediate, trxParent = null }) {\n    this.driver = driver;\n    this.Promise = Promise;\n    this._async = asyncRunner(Promise);\n    this._immediate = trxImmediate;\n    this._parent = trxParent;\n    this._trx = null;\n  }\n\n  run (sql, ...args) {\n    this._trxCheck();\n    const Promise = this.Promise;\n    const params = prepareParams(args);\n\n    return new Promise((resolve, reject) => {\n      this.driver.run(sql, params, function runExecResult (err) {\n        if (err) {\n          reject(err);\n        }\n        else {\n          // Per https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n          // when run() succeeds, the `this' object is a driver statement object. Wrap it as a\n          // Statement.\n          resolve(new Statement(this, Promise));\n        }\n      });\n    });\n  }\n\n  get (sql, ...args) {\n    this._trxCheck();\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.get(sql, params, (err, row) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all (sql, ...args) {\n    this._trxCheck();\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.all(sql, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n   */\n  exec (sql) {\n    this._trxCheck();\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.exec(sql, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each (sql, ...args) {\n    this._trxCheck();\n    const [params, callback] = prepareParams(args, true);\n\n    return new this.Promise((resolve, reject) => {\n      let error = null;\n\n      const cb = (err, row) => {\n        if (error !== null) {\n          return;\n        }\n        try {\n          callback(row);\n        }\n        catch (e) {\n          error = e;\n        }\n      };\n\n      const done = (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        }\n        else if (error) {\n          reject(error);\n        }\n        else {\n          resolve(rowsCount);\n        }\n      };\n\n      this.driver.each(sql, params, cb, done);\n    });\n  }\n\n  prepare (sql, ...args) {\n    this._trxCheck();\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      const stmt = this.driver.prepare(sql, params, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(new Statement(stmt, this.Promise));\n        }\n      });\n    });\n  }\n\n  wait () {\n    this._trxCheck();\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.wait((err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  transaction (fn, immediate = this._immediate) {\n    return this._trxWrap(fn, immediate);\n  }\n\n  transactionAsync (gen, immediate = this._immediate) {\n    return this._trxWrap(gen, immediate, true);\n  }\n\n  _trxCheck (parent = false) {\n    if (this._trx !== null) {\n      throw new Error('A transaction is currently active for this connection');\n    }\n    else if (parent && this._parent !== null) {\n      throw new Error('Managed savepoints are not supported at this time');\n    }\n  }\n\n  _trxWrap (fn, immediate, isAsync = false) {\n    this._trxCheck(true);\n\n    return this._async(function* _trxWrapAsync () {\n      // Create child Database object for transaction\n      const trx = new Database(this.driver, {\n        Promise: this.Promise,\n        trxImmediate: this._immediate,\n        trxParent: this,\n      });\n\n      // Begin transaction\n      yield immediate ? trx.exec('BEGIN IMMEDIATE') : trx.exec('BEGIN');\n      this._trx = trx;\n\n      let result;\n      try {\n        // Pass connection to function\n        result = yield isAsync ? this._async(fn, trx) : fn.call(this, trx);\n\n        // Commit\n        yield trx.exec('COMMIT');\n      }\n      catch (err) {\n        // Roll back, release connection, and re-throw\n        yield trx.exec('ROLLBACK');\n        throw err;\n      }\n      finally {\n        this._trx = null;\n      }\n\n      return result;\n    });\n  }\n\n}\n\nexport default Database;\n","/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport EventEmitter from 'events';\nimport sqlite3 from 'sqlite3';\nimport genericPool from 'generic-pool';\nimport Database from './Database';\nimport Statement from './Statement';\nimport { isThenable, asyncRunner } from './utils';\n\n// Default options\nconst defaults = {\n  // sqlite defaults\n  mode: null,\n  verbose: false,\n  busyTimeout: 1000,\n  foreignKeys: true,\n  walMode: true,\n  loadExtensions: [],\n\n  // pool defaults\n  min: 1,\n  max: 4,\n  acquireTimeout: 1000,\n\n  // internal defaults\n  trxImmediate: true,\n  delayRelease: true,\n\n  // general defaults\n  Promise: global.Promise,\n};\n\nclass Sqlite extends EventEmitter {\n  constructor (filename = ':memory:', options = {}) {\n    super();\n\n    // Extract options\n    const {\n      mode,\n      verbose,\n      busyTimeout,\n      foreignKeys,\n      walMode,\n      loadExtensions,\n      min,\n      max,\n      trxImmediate,\n      delayRelease,\n      acquireTimeout,\n      Promise,\n    } = Object.assign({}, defaults, options);\n\n    // Re-consolidate options\n    this._pool_opts = { min, max, Promise, acquireTimeoutMillis: acquireTimeout };\n    this._sqlite_opts = { mode, verbose, busyTimeout, foreignKeys, walMode };\n    this._sqlite_file = filename;\n    this._sqlite_extn = loadExtensions;\n    this._immediate = trxImmediate;\n    this.delayRelease = delayRelease;\n    this.Promise = Promise;\n\n    // Async runner\n    this._async = asyncRunner(Promise);\n\n    // Special case min/max for anonymous or in-memory database\n    if (filename === '' || filename === ':memory:') {\n      this._pool_opts.min = 1;\n      this._pool_opts.max = 1;\n    }\n\n    // Factory functions for generic-pool\n    this._pool_factory = {\n      create: () => this._create(),\n\n      destroy: connection => this._destroy(connection),\n    };\n\n    // Create pool\n    this._pool = genericPool.createPool(this._pool_factory, this._pool_opts);\n\n    // Re-emit pool errors\n    this._pool.on('factoryCreateError', err => this.emit('error', err));\n    this._pool.on('factoryDestroyError', err => this.emit('error', err));\n  }\n\n  _create () {\n    return this._async(function* _createAsync () {\n      const Promise = this.Promise;\n      const trxImmediate = this._immediate;\n      const options = this._sqlite_opts;\n      const filename = this._sqlite_file;\n\n      // Create database connection, wait until open complete\n      const connection = yield new Promise((resolve, reject) => {\n        let driver;\n        const callback = (err) => {\n          if (err) {\n            return reject(err);\n          }\n          return resolve(new Database(driver, { Promise, trxImmediate }));\n        };\n\n        if (options.mode !== null) {\n          driver = new sqlite3.Database(filename, options.mode, callback);\n        }\n        else {\n          driver = new sqlite3.Database(filename, callback);\n        }\n\n        // Add event re-emitters\n        driver.on('error', err => this.emit('error', err));\n        driver.once('open', () => this.emit('open', filename, driver));\n        driver.once('close', () => this.emit('close', filename, driver));\n\n        // Can't reset this\n        if (options.verbose) {\n          driver.verbose();\n          driver.on('trace', (...args) => this.emit('trace', ...args));\n          driver.on('profile', (...args) => this.emit('profile', ...args));\n        }\n\n        // Busy timeout default hardcoded to 1000ms, so\n        // only configure if a different value given\n        if (options.busyTimeout !== 1000) {\n          driver.configure('busyTimeout', options.busyTimeout);\n        }\n      });\n\n      // Await each for consistency\n      // Load extensions\n      for (const extension of this._sqlite_extn) {\n        const extensionPath = path.resolve(extension);\n        yield new Promise((resolve, reject) => {\n          connection.driver.loadExtension(extensionPath, (err) => {\n            if (err) {\n              return reject(err);\n            }\n            return resolve();\n          });\n        });\n      }\n\n      // Set foreign keys and/or WAL mode as appropriate\n      if (options.foreignKeys) {\n        yield connection.exec('PRAGMA foreign_keys = ON;');\n      }\n      if (options.walMode) {\n        yield connection.exec('PRAGMA journal_mode = WAL;');\n      }\n\n      // Return now-configured db connection\n      return connection;\n    });\n  }\n\n  _destroy (connection) {\n    return new this.Promise((resolve, reject) => {\n      connection.driver.close((err) => {\n        if (err) {\n          return reject(err);\n        }\n        return resolve();\n      });\n    });\n  }\n\n  _release (connection) {\n    if (this.delayRelease) {\n      return setImmediate(() => this._pool.release(connection));\n    }\n    return this._pool.release(connection);\n  }\n\n  _acquireRelease (fn, isAsync = false) {\n    return this._async(function* _acquireReleaseAsync () {\n      const connection = yield this._pool.acquire();\n      let result;\n      try {\n        if (isAsync) {\n          // Run fn as async (generator)\n          result = yield this._async(fn, connection);\n        }\n        else {\n          // Pass connection to function\n          result = yield fn.call(this, connection);\n        }\n      }\n      finally {\n        this._release(connection);\n      }\n      return result;\n    });\n  }\n\n  close () {\n    return this._async(function* _close() {\n      const to_close = [];\n      // Queue up enough acquire() calls for all pooled connections\n      while (to_close.length < this._pool.size) {\n        to_close.push(this._pool.acquire().catch(() => {}));\n      }\n      // Now set pool to draining to block further acquisitions\n      const drained = this._pool.drain();\n      // Wait until acquired\n      const closing = (yield Promise.all(to_close)).filter(c => !!c);\n      // Close and destroy all but last connection\n      closing.splice(1).forEach(conn => this._pool.destroy(conn));\n      // Wait until only last connection open\n      while (this._pool.size > 1) {\n        yield new Promise((resolve) => setImmediate(resolve));\n      }\n      // Clear last connection, and let pool finish draining\n      closing.forEach(conn => this._pool.destroy(conn));\n      yield drained;\n      yield this._pool.clear();\n    });\n  }\n\n  exec (...args) {\n    return this._acquireRelease(conn => conn.exec(...args)).then(() => {});\n  }\n\n  run (...args) {\n    return this._acquireRelease(conn => conn.run(...args));\n  }\n\n  get (...args) {\n    return this._acquireRelease(conn => conn.get(...args));\n  }\n\n  all (...args) {\n    return this._acquireRelease(conn => conn.all(...args));\n  }\n\n  each (...args) {\n    return this._acquireRelease(conn => conn.each(...args));\n  }\n\n  use (fn) {\n    return this._acquireRelease((conn) => {\n      // Pass connection to function\n      const result = fn.call(this, conn);\n\n      // If function didn't return a thenable, wait\n      return isThenable(result) ? result : conn.wait().then(() => result);\n    });\n  }\n\n  useAsync (gen) {\n    return this._acquireRelease(gen, true);\n  }\n\n  transaction (fn, immediate = this._immediate) {\n    return this._acquireRelease(conn => conn.transaction(fn, immediate));\n  }\n\n  transactionAsync (gen, immediate = this._immediate) {\n    return this._acquireRelease(conn => conn.transactionAsync(gen, immediate));\n  }\n\n  /**\n   * Migrates database schema to the latest version\n   */\n  migrate ({ force, table = 'migrations', migrationsPath = './migrations' } = {}) {\n    return this._async(function* _migrateAsync () {\n      const Promise = this.Promise;\n      const location = path.resolve(migrationsPath);\n\n      // Get the list of migration files, for example:\n      //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n      //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n      const migrations = yield new Promise((resolve, reject) => {\n        fs.readdir(location, (err, files) => {\n          if (err) {\n            reject(err);\n          }\n          else {\n            resolve(files\n              .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n              .filter(x => x !== null)\n              .map(x => ({ id: Number(x[1]), name: x[2], filename: x[0] }))\n              .sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0)));\n          }\n        });\n      });\n\n      if (!migrations.length) {\n        throw new Error(`No migration files found in '${location}'.`);\n      }\n\n      // Get the list of migrations, for example:\n      // { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n      // { id: 2, name: 'feature', fielname: '002-feature.sql', up: ..., down: ... }\n      yield Promise.all(migrations.map(migration => new Promise((resolve, reject) => {\n        const filename = path.join(location, migration.filename);\n        fs.readFile(filename, 'utf-8', (err, data) => {\n          if (err) {\n            reject(err);\n          }\n          else {\n            const [up, down] = data.split(/^--\\s+?down/mi);\n            if (!down) {\n              reject(new Error(\n                `The file ${migration.filename} is missing a '-- Down' separator.`\n              ));\n            }\n            else {\n              // Remove comments and trim whitespaces\n              /* eslint-disable no-param-reassign */\n              migration.up = up.replace(/^--.*?$/gm, '').trim();\n              migration.down = down.replace(/^--.*?$/gm, '').trim();\n              /* eslint-enable no-param-reassign */\n              resolve();\n            }\n          }\n        });\n      })));\n\n      yield this.useAsync(function* _runMigrationsAsync (conn) {\n        // Create a database table for migrations meta data if it doesn't exist\n        yield conn.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n    id   INTEGER PRIMARY KEY,\n    name TEXT    NOT NULL,\n    up   TEXT    NOT NULL,\n    down TEXT    NOT NULL\n  )`);\n\n        // Get the list of already applied migrations\n        let dbMigrations = yield conn.all(\n          `SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`,\n        );\n\n        // Undo migrations that exist only in the database but not in files,\n        // also undo the last migration if the `force` option was set to `last`.\n        const lastMigration = migrations[migrations.length - 1];\n        const prev = dbMigrations\n                      .slice()\n                      .sort((a, b) => (a.id < b.id ? 1 : a.id > b.id ? -1 : 0));\n        for (const migration of prev) {\n          if (!migrations.some(x => x.id === migration.id) ||\n              (Number.isInteger(force) && migration.id > force) ||\n              (force === 'last' && migration.id === lastMigration.id)) {\n            yield conn.transactionAsync(function* _downAsync (trx) {\n              yield trx.exec(migration.down);\n              yield trx.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n            });\n            dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n          }\n          else {\n            break;\n          }\n        }\n\n        // Apply pending migrations\n        const lastMigrationId = dbMigrations.length\n                              ? dbMigrations[dbMigrations.length - 1].id\n                              : 0;\n        const maxMigrationId = Number.isInteger(force)\n                             ? force\n                             : migrations[migrations.length - 1].id;\n        for (const migration of migrations) {\n          if (migration.id > lastMigrationId &&\n              migration.id <= maxMigrationId) {\n            yield conn.transactionAsync(function* _upAsync (trx) {\n              yield trx.exec(migration.up);\n              yield trx.run(\n                `INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`,\n                migration.id, migration.name, migration.up, migration.down\n              );\n            });\n          }\n        }\n      });\n\n      return this;\n    });\n  }\n\n  static get Database () {\n    return Database;\n  }\n\n  static get Statement () {\n    return Statement;\n  }\n\n  static get OPEN_READONLY () { return sqlite3.OPEN_READONLY; }\n  static get OPEN_READWRITE () { return sqlite3.OPEN_READWRITE; }\n  static get OPEN_CREATE () { return sqlite3.OPEN_CREATE; }\n  static get VERSION () { return sqlite3.VERSION; }\n  static get SOURCE_ID () { return sqlite3.SOURCE_ID; }\n  static get VERSION_NUMBER () { return sqlite3.VERSION_NUMBER; }\n  static get OK () { return sqlite3.OK; }\n  static get ERROR () { return sqlite3.ERROR; }\n  static get INTERNAL () { return sqlite3.INTERNAL; }\n  static get PERM () { return sqlite3.PERM; }\n  static get ABORT () { return sqlite3.ABORT; }\n  static get BUSY () { return sqlite3.BUSY; }\n  static get LOCKED () { return sqlite3.LOCKED; }\n  static get NOMEM () { return sqlite3.NOMEM; }\n  static get READONLY () { return sqlite3.READONLY; }\n  static get INTERRUPT () { return sqlite3.INTERRUPT; }\n  static get IOERR () { return sqlite3.IOERR; }\n  static get CORRUPT () { return sqlite3.CORRUPT; }\n  static get NOTFOUND () { return sqlite3.NOTFOUND; }\n  static get FULL () { return sqlite3.FULL; }\n  static get CANTOPEN () { return sqlite3.CANTOPEN; }\n  static get PROTOCOL () { return sqlite3.PROTOCOL; }\n  static get EMPTY () { return sqlite3.EMPTY; }\n  static get SCHEMA () { return sqlite3.SCHEMA; }\n  static get TOOBIG () { return sqlite3.TOOBIG; }\n  static get CONSTRAINT () { return sqlite3.CONSTRAINT; }\n  static get MISMATCH () { return sqlite3.MISMATCH; }\n  static get MISUSE () { return sqlite3.MISUSE; }\n  static get NOLFS () { return sqlite3.NOLFS; }\n  static get AUTH () { return sqlite3.AUTH; }\n  static get FORMAT () { return sqlite3.FORMAT; }\n  static get RANGE () { return sqlite3.RANGE; }\n  static get NOTADB () { return sqlite3.NOTADB; }\n\n}\n\nexport default Sqlite;\n"],"names":["prepareParams","args","requireCallback","callback","length","Error","pop","params","isThenable","obj","undefined","then","asyncRunner","Promise","global","runAsync","fn","gen","apply","resolve","reject","step","key","arg","info","value","error","done","val","err","Statement","stmt","sql","lastID","changes","bind","reset","finalize","run","get","row","all","rows","cb","e","rowsCount","each","Database","driver","trxImmediate","trxParent","_async","_immediate","_parent","_trx","_trxCheck","runExecResult","exec","prepare","wait","immediate","_trxWrap","parent","isAsync","_trxWrapAsync","trx","result","call","defaults","Sqlite","EventEmitter","filename","options","Object","assign","_pool_opts","min","max","acquireTimeoutMillis","acquireTimeout","_sqlite_opts","mode","verbose","busyTimeout","foreignKeys","walMode","_sqlite_file","_sqlite_extn","loadExtensions","delayRelease","_pool_factory","_create","connection","_destroy","_pool","genericPool","createPool","on","emit","_createAsync","sqlite3","once","configure","extension","extensionPath","path","loadExtension","close","setImmediate","release","_acquireReleaseAsync","acquire","_release","_close","to_close","size","push","catch","drained","drain","closing","filter","c","splice","forEach","conn","destroy","clear","_acquireRelease","transaction","transactionAsync","force","table","migrationsPath","_migrateAsync","location","migrations","readdir","files","map","x","match","id","Number","name","sort","a","b","migration","join","readFile","data","up","down","split","replace","trim","useAsync","_runMigrationsAsync","dbMigrations","lastMigration","prev","slice","some","isInteger","_downAsync","lastMigrationId","maxMigrationId","_upAsync","OPEN_READONLY","OPEN_READWRITE","OPEN_CREATE","VERSION","SOURCE_ID","VERSION_NUMBER","OK","ERROR","INTERNAL","PERM","ABORT","BUSY","LOCKED","NOMEM","READONLY","INTERRUPT","IOERR","CORRUPT","NOTFOUND","FULL","CANTOPEN","PROTOCOL","EMPTY","SCHEMA","TOOBIG","CONSTRAINT","MISMATCH","MISUSE","NOLFS","AUTH","FORMAT","RANGE","NOTADB"],"mappings":"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"}