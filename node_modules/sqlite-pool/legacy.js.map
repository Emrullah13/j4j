{"version":3,"file":null,"sources":["../src/utils.js","../src/Statement.js","../src/Database.js","../src/Sqlite.js"],"sourcesContent":["/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction prepareParams (args, requireCallback = false) {\n  let callback;\n  if (requireCallback) {\n    if (args.length < 1) {\n      throw new Error('Callback argument is required');\n    }\n    callback = args.pop();\n  }\n  const params = args.length === 1 ? args[0] : args;\n  return callback ? [params, callback] : params;\n}\n\nfunction isThenable (obj) {\n  return obj !== undefined &&\n         obj !== null &&\n         typeof obj === 'object' &&\n         'then' in obj &&\n         typeof obj.then === 'function';\n}\n\nfunction asyncRunner (Promise = global.Promise) {\n  return function runAsync (fn, ...args) {\n    const gen = fn.apply(this, args);\n    return new Promise((resolve, reject) => {\n      function step (key, arg) {\n        let info;\n        let value;\n\n        try {\n          info = gen[key](arg);\n          value = info.value;\n        }\n        catch (error) {\n          return reject(error);\n        }\n\n        if (info.done) {\n          return resolve(value);\n        }\n        return Promise.resolve(value).then((val) => {\n          step('next', val);\n        }, (err) => {\n          step('throw', err);\n        });\n      }\n\n      return step('next');\n    });\n  };\n}\n\nexport { prepareParams, isThenable, asyncRunner };\n","/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport { prepareParams } from './utils';\n\nclass Statement {\n\n  constructor (stmt, Promise) {\n    this.stmt = stmt;\n    this.Promise = Promise;\n  }\n\n  get sql () {\n    return this.stmt.sql;\n  }\n\n  get lastID () {\n    return this.stmt.lastID;\n  }\n\n  get changes () {\n    return this.stmt.changes;\n  }\n\n  bind (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.bind(params, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  reset () {\n    return new this.Promise((resolve) => {\n      this.stmt.reset(() => {\n        resolve(this);\n      });\n    });\n  }\n\n  finalize () {\n    return new this.Promise((resolve, reject) => {\n      this.stmt.finalize((err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  run (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.run(params, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  get (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.get(params, (err, row) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all (...args) {\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.stmt.all(params, (err, rows) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  each (...args) {\n    const [params, callback] = prepareParams(args, true);\n\n    return new this.Promise((resolve, reject) => {\n      let error = null;\n\n      const cb = (err, row) => {\n        if (error !== null) {\n          return;\n        }\n        try {\n          callback(row);\n        }\n        catch (e) {\n          error = e;\n        }\n      };\n\n      const done = (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        }\n        else if (error) {\n          reject(error);\n        }\n        else {\n          resolve(rowsCount);\n        }\n      };\n\n      this.stmt.each(params, cb, done);\n    });\n  }\n\n}\n\nexport default Statement;\n","/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport Statement from './Statement';\nimport { prepareParams, asyncRunner } from './utils';\n\nclass Database {\n\n  /**\n   * Initializes a new instance of the database client.\n   * @param driver An instance of SQLite3 driver library.\n   * @param promiseLibrary ES6 Promise library to use.\n     */\n  constructor (driver, { Promise, trxImmediate, trxParent = null }) {\n    this.driver = driver;\n    this.Promise = Promise;\n    this._async = asyncRunner(Promise);\n    this._immediate = trxImmediate;\n    this._parent = trxParent;\n    this._trx = null;\n  }\n\n  run (sql, ...args) {\n    this._trxCheck();\n    const Promise = this.Promise;\n    const params = prepareParams(args);\n\n    return new Promise((resolve, reject) => {\n      this.driver.run(sql, params, function runExecResult (err) {\n        if (err) {\n          reject(err);\n        }\n        else {\n          // Per https://github.com/mapbox/node-sqlite3/wiki/API#databaserunsql-param--callback\n          // when run() succeeds, the `this' object is a driver statement object. Wrap it as a\n          // Statement.\n          resolve(new Statement(this, Promise));\n        }\n      });\n    });\n  }\n\n  get (sql, ...args) {\n    this._trxCheck();\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.get(sql, params, (err, row) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  all (sql, ...args) {\n    this._trxCheck();\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.all(sql, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Runs all the SQL queries in the supplied string. No result rows are retrieved.\n   */\n  exec (sql) {\n    this._trxCheck();\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.exec(sql, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(this);\n        }\n      });\n    });\n  }\n\n  each (sql, ...args) {\n    this._trxCheck();\n    const [params, callback] = prepareParams(args, true);\n\n    return new this.Promise((resolve, reject) => {\n      let error = null;\n\n      const cb = (err, row) => {\n        if (error !== null) {\n          return;\n        }\n        try {\n          callback(row);\n        }\n        catch (e) {\n          error = e;\n        }\n      };\n\n      const done = (err, rowsCount = 0) => {\n        if (err) {\n          reject(err);\n        }\n        else if (error) {\n          reject(error);\n        }\n        else {\n          resolve(rowsCount);\n        }\n      };\n\n      this.driver.each(sql, params, cb, done);\n    });\n  }\n\n  prepare (sql, ...args) {\n    this._trxCheck();\n    const params = prepareParams(args);\n\n    return new this.Promise((resolve, reject) => {\n      const stmt = this.driver.prepare(sql, params, (err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve(new Statement(stmt, this.Promise));\n        }\n      });\n    });\n  }\n\n  wait () {\n    this._trxCheck();\n\n    return new this.Promise((resolve, reject) => {\n      this.driver.wait((err) => {\n        if (err) {\n          reject(err);\n        }\n        else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  transaction (fn, immediate = this._immediate) {\n    return this._trxWrap(fn, immediate);\n  }\n\n  transactionAsync (gen, immediate = this._immediate) {\n    return this._trxWrap(gen, immediate, true);\n  }\n\n  _trxCheck (parent = false) {\n    if (this._trx !== null) {\n      throw new Error('A transaction is currently active for this connection');\n    }\n    else if (parent && this._parent !== null) {\n      throw new Error('Managed savepoints are not supported at this time');\n    }\n  }\n\n  _trxWrap (fn, immediate, isAsync = false) {\n    this._trxCheck(true);\n\n    return this._async(function* _trxWrapAsync () {\n      // Create child Database object for transaction\n      const trx = new Database(this.driver, {\n        Promise: this.Promise,\n        trxImmediate: this._immediate,\n        trxParent: this,\n      });\n\n      // Begin transaction\n      yield immediate ? trx.exec('BEGIN IMMEDIATE') : trx.exec('BEGIN');\n      this._trx = trx;\n\n      let result;\n      try {\n        // Pass connection to function\n        result = yield isAsync ? this._async(fn, trx) : fn.call(this, trx);\n\n        // Commit\n        yield trx.exec('COMMIT');\n      }\n      catch (err) {\n        // Roll back, release connection, and re-throw\n        yield trx.exec('ROLLBACK');\n        throw err;\n      }\n      finally {\n        this._trx = null;\n      }\n\n      return result;\n    });\n  }\n\n}\n\nexport default Database;\n","/**\n * Pooled SQLite client library for Node.js\n * Based on the node-sqlite library\n *\n * Copyright © 2017 Raymond Neilson. All rights reserved.\n *\n * Original work copyright © 2016 Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport EventEmitter from 'events';\nimport sqlite3 from 'sqlite3';\nimport genericPool from 'generic-pool';\nimport Database from './Database';\nimport Statement from './Statement';\nimport { isThenable, asyncRunner } from './utils';\n\n// Default options\nconst defaults = {\n  // sqlite defaults\n  mode: null,\n  verbose: false,\n  busyTimeout: 1000,\n  foreignKeys: true,\n  walMode: true,\n  loadExtensions: [],\n\n  // pool defaults\n  min: 1,\n  max: 4,\n  acquireTimeout: 1000,\n\n  // internal defaults\n  trxImmediate: true,\n  delayRelease: true,\n\n  // general defaults\n  Promise: global.Promise,\n};\n\nclass Sqlite extends EventEmitter {\n  constructor (filename = ':memory:', options = {}) {\n    super();\n\n    // Extract options\n    const {\n      mode,\n      verbose,\n      busyTimeout,\n      foreignKeys,\n      walMode,\n      loadExtensions,\n      min,\n      max,\n      trxImmediate,\n      delayRelease,\n      acquireTimeout,\n      Promise,\n    } = Object.assign({}, defaults, options);\n\n    // Re-consolidate options\n    this._pool_opts = { min, max, Promise, acquireTimeoutMillis: acquireTimeout };\n    this._sqlite_opts = { mode, verbose, busyTimeout, foreignKeys, walMode };\n    this._sqlite_file = filename;\n    this._sqlite_extn = loadExtensions;\n    this._immediate = trxImmediate;\n    this.delayRelease = delayRelease;\n    this.Promise = Promise;\n\n    // Async runner\n    this._async = asyncRunner(Promise);\n\n    // Special case min/max for anonymous or in-memory database\n    if (filename === '' || filename === ':memory:') {\n      this._pool_opts.min = 1;\n      this._pool_opts.max = 1;\n    }\n\n    // Factory functions for generic-pool\n    this._pool_factory = {\n      create: () => this._create(),\n\n      destroy: connection => this._destroy(connection),\n    };\n\n    // Create pool\n    this._pool = genericPool.createPool(this._pool_factory, this._pool_opts);\n\n    // Re-emit pool errors\n    this._pool.on('factoryCreateError', err => this.emit('error', err));\n    this._pool.on('factoryDestroyError', err => this.emit('error', err));\n  }\n\n  _create () {\n    return this._async(function* _createAsync () {\n      const Promise = this.Promise;\n      const trxImmediate = this._immediate;\n      const options = this._sqlite_opts;\n      const filename = this._sqlite_file;\n\n      // Create database connection, wait until open complete\n      const connection = yield new Promise((resolve, reject) => {\n        let driver;\n        const callback = (err) => {\n          if (err) {\n            return reject(err);\n          }\n          return resolve(new Database(driver, { Promise, trxImmediate }));\n        };\n\n        if (options.mode !== null) {\n          driver = new sqlite3.Database(filename, options.mode, callback);\n        }\n        else {\n          driver = new sqlite3.Database(filename, callback);\n        }\n\n        // Add event re-emitters\n        driver.on('error', err => this.emit('error', err));\n        driver.once('open', () => this.emit('open', filename, driver));\n        driver.once('close', () => this.emit('close', filename, driver));\n\n        // Can't reset this\n        if (options.verbose) {\n          driver.verbose();\n          driver.on('trace', (...args) => this.emit('trace', ...args));\n          driver.on('profile', (...args) => this.emit('profile', ...args));\n        }\n\n        // Busy timeout default hardcoded to 1000ms, so\n        // only configure if a different value given\n        if (options.busyTimeout !== 1000) {\n          driver.configure('busyTimeout', options.busyTimeout);\n        }\n      });\n\n      // Await each for consistency\n      // Load extensions\n      for (const extension of this._sqlite_extn) {\n        const extensionPath = path.resolve(extension);\n        yield new Promise((resolve, reject) => {\n          connection.driver.loadExtension(extensionPath, (err) => {\n            if (err) {\n              return reject(err);\n            }\n            return resolve();\n          });\n        });\n      }\n\n      // Set foreign keys and/or WAL mode as appropriate\n      if (options.foreignKeys) {\n        yield connection.exec('PRAGMA foreign_keys = ON;');\n      }\n      if (options.walMode) {\n        yield connection.exec('PRAGMA journal_mode = WAL;');\n      }\n\n      // Return now-configured db connection\n      return connection;\n    });\n  }\n\n  _destroy (connection) {\n    return new this.Promise((resolve, reject) => {\n      connection.driver.close((err) => {\n        if (err) {\n          return reject(err);\n        }\n        return resolve();\n      });\n    });\n  }\n\n  _release (connection) {\n    if (this.delayRelease) {\n      return setImmediate(() => this._pool.release(connection));\n    }\n    return this._pool.release(connection);\n  }\n\n  _acquireRelease (fn, isAsync = false) {\n    return this._async(function* _acquireReleaseAsync () {\n      const connection = yield this._pool.acquire();\n      let result;\n      try {\n        if (isAsync) {\n          // Run fn as async (generator)\n          result = yield this._async(fn, connection);\n        }\n        else {\n          // Pass connection to function\n          result = yield fn.call(this, connection);\n        }\n      }\n      finally {\n        this._release(connection);\n      }\n      return result;\n    });\n  }\n\n  close () {\n    return this._async(function* _close() {\n      const to_close = [];\n      // Queue up enough acquire() calls for all pooled connections\n      while (to_close.length < this._pool.size) {\n        to_close.push(this._pool.acquire().catch(() => {}));\n      }\n      // Now set pool to draining to block further acquisitions\n      const drained = this._pool.drain();\n      // Wait until acquired\n      const closing = (yield Promise.all(to_close)).filter(c => !!c);\n      // Close and destroy all but last connection\n      closing.splice(1).forEach(conn => this._pool.destroy(conn));\n      // Wait until only last connection open\n      while (this._pool.size > 1) {\n        yield new Promise((resolve) => setImmediate(resolve));\n      }\n      // Clear last connection, and let pool finish draining\n      closing.forEach(conn => this._pool.destroy(conn));\n      yield drained;\n      yield this._pool.clear();\n    });\n  }\n\n  exec (...args) {\n    return this._acquireRelease(conn => conn.exec(...args)).then(() => {});\n  }\n\n  run (...args) {\n    return this._acquireRelease(conn => conn.run(...args));\n  }\n\n  get (...args) {\n    return this._acquireRelease(conn => conn.get(...args));\n  }\n\n  all (...args) {\n    return this._acquireRelease(conn => conn.all(...args));\n  }\n\n  each (...args) {\n    return this._acquireRelease(conn => conn.each(...args));\n  }\n\n  use (fn) {\n    return this._acquireRelease((conn) => {\n      // Pass connection to function\n      const result = fn.call(this, conn);\n\n      // If function didn't return a thenable, wait\n      return isThenable(result) ? result : conn.wait().then(() => result);\n    });\n  }\n\n  useAsync (gen) {\n    return this._acquireRelease(gen, true);\n  }\n\n  transaction (fn, immediate = this._immediate) {\n    return this._acquireRelease(conn => conn.transaction(fn, immediate));\n  }\n\n  transactionAsync (gen, immediate = this._immediate) {\n    return this._acquireRelease(conn => conn.transactionAsync(gen, immediate));\n  }\n\n  /**\n   * Migrates database schema to the latest version\n   */\n  migrate ({ force, table = 'migrations', migrationsPath = './migrations' } = {}) {\n    return this._async(function* _migrateAsync () {\n      const Promise = this.Promise;\n      const location = path.resolve(migrationsPath);\n\n      // Get the list of migration files, for example:\n      //   { id: 1, name: 'initial', filename: '001-initial.sql' }\n      //   { id: 2, name: 'feature', fielname: '002-feature.sql' }\n      const migrations = yield new Promise((resolve, reject) => {\n        fs.readdir(location, (err, files) => {\n          if (err) {\n            reject(err);\n          }\n          else {\n            resolve(files\n              .map(x => x.match(/^(\\d+).(.*?)\\.sql$/))\n              .filter(x => x !== null)\n              .map(x => ({ id: Number(x[1]), name: x[2], filename: x[0] }))\n              .sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0)));\n          }\n        });\n      });\n\n      if (!migrations.length) {\n        throw new Error(`No migration files found in '${location}'.`);\n      }\n\n      // Get the list of migrations, for example:\n      // { id: 1, name: 'initial', filename: '001-initial.sql', up: ..., down: ... }\n      // { id: 2, name: 'feature', fielname: '002-feature.sql', up: ..., down: ... }\n      yield Promise.all(migrations.map(migration => new Promise((resolve, reject) => {\n        const filename = path.join(location, migration.filename);\n        fs.readFile(filename, 'utf-8', (err, data) => {\n          if (err) {\n            reject(err);\n          }\n          else {\n            const [up, down] = data.split(/^--\\s+?down/mi);\n            if (!down) {\n              reject(new Error(\n                `The file ${migration.filename} is missing a '-- Down' separator.`\n              ));\n            }\n            else {\n              // Remove comments and trim whitespaces\n              /* eslint-disable no-param-reassign */\n              migration.up = up.replace(/^--.*?$/gm, '').trim();\n              migration.down = down.replace(/^--.*?$/gm, '').trim();\n              /* eslint-enable no-param-reassign */\n              resolve();\n            }\n          }\n        });\n      })));\n\n      yield this.useAsync(function* _runMigrationsAsync (conn) {\n        // Create a database table for migrations meta data if it doesn't exist\n        yield conn.run(`CREATE TABLE IF NOT EXISTS \"${table}\" (\n    id   INTEGER PRIMARY KEY,\n    name TEXT    NOT NULL,\n    up   TEXT    NOT NULL,\n    down TEXT    NOT NULL\n  )`);\n\n        // Get the list of already applied migrations\n        let dbMigrations = yield conn.all(\n          `SELECT id, name, up, down FROM \"${table}\" ORDER BY id ASC`,\n        );\n\n        // Undo migrations that exist only in the database but not in files,\n        // also undo the last migration if the `force` option was set to `last`.\n        const lastMigration = migrations[migrations.length - 1];\n        const prev = dbMigrations\n                      .slice()\n                      .sort((a, b) => (a.id < b.id ? 1 : a.id > b.id ? -1 : 0));\n        for (const migration of prev) {\n          if (!migrations.some(x => x.id === migration.id) ||\n              (Number.isInteger(force) && migration.id > force) ||\n              (force === 'last' && migration.id === lastMigration.id)) {\n            yield conn.transactionAsync(function* _downAsync (trx) {\n              yield trx.exec(migration.down);\n              yield trx.run(`DELETE FROM \"${table}\" WHERE id = ?`, migration.id);\n            });\n            dbMigrations = dbMigrations.filter(x => x.id !== migration.id);\n          }\n          else {\n            break;\n          }\n        }\n\n        // Apply pending migrations\n        const lastMigrationId = dbMigrations.length\n                              ? dbMigrations[dbMigrations.length - 1].id\n                              : 0;\n        const maxMigrationId = Number.isInteger(force)\n                             ? force\n                             : migrations[migrations.length - 1].id;\n        for (const migration of migrations) {\n          if (migration.id > lastMigrationId &&\n              migration.id <= maxMigrationId) {\n            yield conn.transactionAsync(function* _upAsync (trx) {\n              yield trx.exec(migration.up);\n              yield trx.run(\n                `INSERT INTO \"${table}\" (id, name, up, down) VALUES (?, ?, ?, ?)`,\n                migration.id, migration.name, migration.up, migration.down\n              );\n            });\n          }\n        }\n      });\n\n      return this;\n    });\n  }\n\n  static get Database () {\n    return Database;\n  }\n\n  static get Statement () {\n    return Statement;\n  }\n\n  static get OPEN_READONLY () { return sqlite3.OPEN_READONLY; }\n  static get OPEN_READWRITE () { return sqlite3.OPEN_READWRITE; }\n  static get OPEN_CREATE () { return sqlite3.OPEN_CREATE; }\n  static get VERSION () { return sqlite3.VERSION; }\n  static get SOURCE_ID () { return sqlite3.SOURCE_ID; }\n  static get VERSION_NUMBER () { return sqlite3.VERSION_NUMBER; }\n  static get OK () { return sqlite3.OK; }\n  static get ERROR () { return sqlite3.ERROR; }\n  static get INTERNAL () { return sqlite3.INTERNAL; }\n  static get PERM () { return sqlite3.PERM; }\n  static get ABORT () { return sqlite3.ABORT; }\n  static get BUSY () { return sqlite3.BUSY; }\n  static get LOCKED () { return sqlite3.LOCKED; }\n  static get NOMEM () { return sqlite3.NOMEM; }\n  static get READONLY () { return sqlite3.READONLY; }\n  static get INTERRUPT () { return sqlite3.INTERRUPT; }\n  static get IOERR () { return sqlite3.IOERR; }\n  static get CORRUPT () { return sqlite3.CORRUPT; }\n  static get NOTFOUND () { return sqlite3.NOTFOUND; }\n  static get FULL () { return sqlite3.FULL; }\n  static get CANTOPEN () { return sqlite3.CANTOPEN; }\n  static get PROTOCOL () { return sqlite3.PROTOCOL; }\n  static get EMPTY () { return sqlite3.EMPTY; }\n  static get SCHEMA () { return sqlite3.SCHEMA; }\n  static get TOOBIG () { return sqlite3.TOOBIG; }\n  static get CONSTRAINT () { return sqlite3.CONSTRAINT; }\n  static get MISMATCH () { return sqlite3.MISMATCH; }\n  static get MISUSE () { return sqlite3.MISUSE; }\n  static get NOLFS () { return sqlite3.NOLFS; }\n  static get AUTH () { return sqlite3.AUTH; }\n  static get FORMAT () { return sqlite3.FORMAT; }\n  static get RANGE () { return sqlite3.RANGE; }\n  static get NOTADB () { return sqlite3.NOTADB; }\n\n}\n\nexport default Sqlite;\n"],"names":["prepareParams","args","requireCallback","callback","length","Error","pop","params","isThenable","obj","undefined","then","asyncRunner","Promise","global","runAsync","fn","gen","apply","resolve","reject","step","key","arg","info","value","error","done","val","err","Statement","stmt","bind","reset","finalize","run","get","row","all","rows","cb","e","rowsCount","each","sql","lastID","changes","Database","driver","trxImmediate","trxParent","_async","_immediate","_parent","_trx","_trxCheck","runExecResult","exec","prepare","wait","immediate","_trxWrap","parent","isAsync","_trxWrapAsync","trx","call","result","defaults","Sqlite","filename","options","Object","assign","mode","verbose","busyTimeout","foreignKeys","walMode","loadExtensions","min","max","delayRelease","acquireTimeout","_pool_opts","acquireTimeoutMillis","_sqlite_opts","_sqlite_file","_sqlite_extn","_pool_factory","_create","_destroy","connection","_pool","genericPool","createPool","on","emit","_createAsync","sqlite3","once","configure","path","extension","loadExtension","extensionPath","close","setImmediate","release","_acquireReleaseAsync","acquire","_release","_close","to_close","size","push","catch","drain","c","filter","splice","forEach","destroy","conn","drained","clear","_acquireRelease","transaction","transactionAsync","force","table","migrationsPath","_migrateAsync","readdir","location","files","map","x","match","id","Number","name","sort","a","b","migrations","join","migration","readFile","data","split","up","down","replace","trim","useAsync","_runMigrationsAsync","dbMigrations","slice","some","isInteger","lastMigration","_downAsync","prev","lastMigrationId","maxMigrationId","_upAsync","OPEN_READONLY","OPEN_READWRITE","OPEN_CREATE","VERSION","SOURCE_ID","VERSION_NUMBER","OK","ERROR","INTERNAL","PERM","ABORT","BUSY","LOCKED","NOMEM","READONLY","INTERRUPT","IOERR","CORRUPT","NOTFOUND","FULL","CANTOPEN","PROTOCOL","EMPTY","SCHEMA","TOOBIG","CONSTRAINT","MISMATCH","MISUSE","NOLFS","AUTH","FORMAT","RANGE","NOTADB","EventEmitter"],"mappings":"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"}